name: CD - Deploy React Frontend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - frontend/react/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/react
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Send Slack Github Commit Message and SHA
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":":githubloading: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} - ${{ github.event.head_commit.message }}"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json'
          --data '{"text":"Deployment started :progress_bar:"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Generate and set Build Number
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT

      - name: Docker Build & Push
        run: |
          chmod +x ../../.ci/build-publish.sh
          USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
          REPO=spring-boot-demo-react-client \
          TAG=${{ steps.build-number.outputs.BUILD_NUMBER }} \
          ../../.ci/build-publish.sh . \
          --build-arg api_base_url=http://localhost:8080

      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":":docker: Image tag: ${{ steps.build-number.outputs.BUILD_NUMBER }} pushed to ${{ secrets.DOCKERHUB_FRONTEND_URL }}"}'
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update Dockerrun.aws.json image tag name with new build number
        run: |
          echo "Dockerrun.aws.json before updating image tag name"
          cat ../../Dockerrun.aws.json
          sed -i -E 's_(tchao98/spring-boot-demo-react-client:)([^"]*)_\1'${{ steps.build-number.outputs.BUILD_NUMBER }}'_' ../../Dockerrun.aws.json
          echo "Dockerrun.aws.json after updating image tag name"
          cat ../../Dockerrun.aws.json

      # - name: Send Slack Message
      #   run: >
      #     curl -X POST -H 'Content-type: application/json'
      #     --data '{"text":":aws_eb: Start deployment to AWS Elastic Beanstalk"}'
      #     ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Deploy to EB
      #   uses: einaregilsson/beanstalk-deploy@v21
      #   with:
      #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     application_name: ${{ secrets.EB_APPLICATION_NAME }}
      #     environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
      #     version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
      #     version_description: ${{github.SHA}
      #     region: ${{ secrets.EB_REGION }}
      #     deployment_package: Dockerrun.aws.json
      #     wait_for_environment_recovery: 60

      - name: Send Slack Message
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":":githubloading: Committing to repo: ${{ github.server_url }}/${{ github.repository }}"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Commit and push Dockerrun.aws.json
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ../../Dockerrun.aws.json
          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}"
          git push

      # - name: Send Slack Message
      #   run: >
      #     curl -X POST -H 'Content-type: application/json'
      #     --data '{"text":"Deployment and commit completed :checked: ${{ secrets.EB_URL }}"}'
      #     ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Message
        if: always()
        run: >
          curl -X POST -H 'Content-type: application/json' 
          --data '{"text":"Job Status: ${{ job.status }}"}' 
          ${{ secrets.SLACK_WEBHOOK_URL }}